buildscript {
  ext['org.gradle.daemon'] = false
  ext {
    dependencyManagementVersion = '0.5.6.RELEASE'
    springBootVersion = '1.3.3.RELEASE'
    springCloudVersion = 'Brixton.RC2'
    netflixContribVersion = '0.3.0'
    springCloudSleuthVersion = '1.0.0.RC1'
    dockerPluginVersion = '1.2'
    dockerComposePluginVersion = '0.7.1'
    appGroup = 'daggerok'
    appVersion = 1
  }
  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url 'https://plugins.gradle.org/m2/' }
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
              "io.spring.gradle:dependency-management-plugin:$dependencyManagementVersion",
//              "se.transmode.gradle:gradle-docker:$dockerPluginVersion"
              "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.12'
}

allprojects {
  apply plugin: 'idea'

  version = appVersion
  group = appGroup

  apply plugin: 'java'

  targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8

  jar {
    baseName = "$appGroup-$projectDir.name"
  }

  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/libs-milestone' }
    jcenter()
  }
}

subprojects {

  apply plugin: 'io.spring.dependency-management'

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
      mavenBom "org.springframework.cloud:spring-cloud-sleuth:$springCloudSleuthVersion"
    }
  }

  apply plugin: 'spring-boot'

  springBoot { executable = true }

  dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-config',
            'org.springframework.cloud:spring-cloud-starter-eureka',
            'org.springframework.cloud:spring-cloud-starter-hystrix',
            'org.springframework.cloud:spring-cloud-starter-ribbon',
            'org.springframework.cloud:spring-cloud-starter-feign',
            "com.netflix.spring:spring-cloud-netflix-contrib:$netflixContribVersion",
            'org.springframework.boot:spring-boot-starter-hateoas',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.projectlombok:lombok'

    testCompile 'org.springframework.boot:spring-boot-starter-test',
                'org.springframework.restdocs:spring-restdocs-mockmvc'
  }

  /*
  apply plugin: 'docker'

  task buildDocker(type: Docker) {
    push = false
    applicationName = jar.baseName
    dockerfile = project.file("$projectDir/Dockerfile")

    doFirst {
      copy {
        from jar
        into stageDir
      }
    }

    baseImage "java:8"
    maintainer 'Maksim Kostromin <daggerok@gmail.com>'
  }
  */
}

project(':cloud-config-server') {
  dependencies {
    compile 'org.springframework.cloud:spring-cloud-config-server'
  }
}

project(':discovery-service-registry') {
  dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-eureka-server'
  }
}

project(':oauth-server') {
  dependencies {
    compile 'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-mustache',
            'org.springframework.security.oauth:spring-security-oauth2'
  }
}

project(':domain') {}

project(':invoice') {
  dependencies {
    compile project(':domain'),
            'org.springframework.cloud:spring-cloud-security',
            'org.springframework.boot:spring-boot-starter-data-rest',
            'org.springframework.boot:spring-boot-starter-data-jpa'

    runtime 'com.h2database:h2'
  }
}

project(':menu') {
  dependencies {
    compile project(':domain'),
            'org.springframework.cloud:spring-cloud-security',
            'org.springframework.boot:spring-boot-starter-data-rest',
            'org.springframework.boot:spring-boot-starter-data-jpa'

    runtime 'com.h2database:h2'
  }
}

project(':customer-ui') {
  dependencies {
    compile project(':domain'),
        'org.springframework.boot:spring-boot-starter-mustache',
        'org.springframework.cloud:spring-cloud-starter-zuul'
  }
}

project(':provider-ui') {
  dependencies {
    compile project(':domain'),
            'org.springframework.boot:spring-boot-starter-mustache',
            'org.springframework.cloud:spring-cloud-starter-zuul'
  }
}

project(':ui') {
  dependencies {
    compile project(':domain'),
            'org.springframework.cloud:spring-cloud-starter-oauth2',
            'org.springframework.cloud:spring-cloud-security',
            'org.springframework.boot:spring-boot-devtools',
            'org.springframework.cloud:spring-cloud-starter-zuul'
  }
}

def dockerComposeFile = project.file("$rootDir/docker-compose.yaml")
def profile = ''

if (project.hasProperty('profile')) {
  profile = project.property('profile') ?: ''
  if (!profile.trim().isEmpty()) {
    dockerComposeFile = dockerComposeFile.replace('.yaml', "-${profile}.yaml")
  }
}

apply plugin: 'com.avast.gradle.docker-compose'

dockerCompose {
  useComposeFiles = [dockerComposeFile]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = 'Local'
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

def assembleTasks = allprojects*.tasks*.assemble
composeUp.dependsOn assembleTasks
composeUp.shouldRunAfter([clean] + assembleTasks)
